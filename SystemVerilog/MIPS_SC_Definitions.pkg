//Header: `include "MIPS_SC_Definitions.pkg"
`ifndef MIPS_SC_PKG
    `def MIPS_SC_PKG
    package MIPS_SC_Definitions;


    //Current supported opcodes
    localparam R_Type_Opcode =6'b000000;
    localparam LW_Opcode =6'b100011;
    localparam SW_Opcode =6'b101011;
    localparam BEQ_Opcode =6'b000100;
    localparam ADDI_Opcode =6'b001000;
    localparam J_Opcode =6'b000010;

    //Control signals for supported opcodes
    //format {control_sigs_t,alu_op}
    localparam R_Type_Signals = 9'b110000010;
    localparam LW_Signals = 9'b101001000;
    localparam SW_Signals = 9'b001010000;
    localparam BEQ_Signals = 9'b000100001;
    localparam ADDI_Signals = 9'b101000000;
    localparam J_Signals = 9'b000000100;

    //Current supported function codes
    localparam ADD_Funct=6'b100000;
    localparam SUB_Funct=6'b100010;
    localparam SLL_Funct=6'b000000;
    localparam SLLV_Funct=6'b000100;
    localparam SRAV_Funct=6'b000111;

    //Current supported alu select signals
    localparam ADD_ALU_Sel=4'd0;
    localparam SUB_ALU_Sel=4'd1;
    localparam SLL_ALU_Sel=4'd2;
    localparam SLLV_ALU_Sel=4'd4;
    localparam SRAV_ALU_Sel=4'd6;

    //ALU op parameters
    localparam ADD_Op=2'b00;
    localparam SUB_Op=2'b01;
    localparam R_Type_Op=2'b10;

    //Control signal data type
    typedef struct packed{
        logic rfwe;
        logic rfd_sel;
        logic alu_in_sel;
        logic branch;
        logic dmwe;
        logic mem_to_rf_sel;
        logic jump;
    }control_sigs_t;

    typedef struct packed{
        logic[5:0]opcode;
        logic[4:0]rs;
        logic[4:0]rt;
        logic[4:0]rd;
        logic[4:0]shamt;
        logic[4:0]funct;
    }r_type_instruction_t;

    typedef struct packed{
        logic[5:0]opcode;
        logic[4:0]rs;
        logic[4:0]rt;
        logic[15:0]imm;
    }i_type_instruction_t;

    typedef struct packed{
        logic[5:0]opcode;
        logic[25:0]jump_target;
    }j_type_instruction_t;

    typedef union packed{
        r_type_instruction_t r_type_instruction;
        i_type_instruction_t i_type_instruction;
        j_type_instruction_t j_type_instruction;
    }mips_instruction_t;
    endpackage
    import MIPS_SC_Definitions :: *;
`endif