//Header: `include "MIPS_SC_Definitions.pkg"
`ifndef MIPS_SC_PKG
    `define MIPS_SC_PKG
    package MIPS_SC_Definitions;

    
    //Enumerated type for instruction opcodes
    typedef enum logic [5:0]{
         R_Type_Opcode =6'b000000,
         LW_Opcode =6'b100011,
         SW_Opcode =6'b101011,
         BEQ_Opcode =6'b000100,
         ADDI_Opcode =6'b001000,
         J_Opcode =6'b000010,
         ERR_Opcode='x
    }opcode_t;
    
    //Opcode decoder signal packed structure defined data type
    typedef struct packed{
        logic rfwe;
        logic rfd_sel;
        logic alu_in_sel;
        logic branch;
        logic dmwe;
        logic mem_to_rf_sel;
        logic jump;
    }opcode_decoder_signal_t;
    
    typedef enum logic [1:0]{
         ADD_Op=2'b00,
         SUB_Op=2'b01,
         R_Type_Op=2'b10,
         ERR_Op='x
    }alu_op_t;
    
    //Parameters for the opcode decoder signal outputs
    localparam R_Type_Signals = 7'b1100000;
    localparam LW_Signals = 7'b1010010;
    localparam SW_Signals = 7'b0010100;
    localparam BEQ_Signals = 7'b0001000;
    localparam ADDI_Signals = 7'b1010000;
    localparam J_Signals = 7'b0000001;
    localparam ERR_Signals= 7'dx;

    //Enumerated data type for the function encoding
    typedef enum logic [5:0]{
        ADD_Funct=6'b100000,
        SUB_Funct=6'b100010,
        SLL_Funct=6'b000000,
        SLLV_Funct=6'b000100,
        SRAV_Funct=6'b000111,
        ERR_Funct='x
    }function_t;
    
    //Enumerated data type for the alu select signal
    typedef enum logic [3:0]{
        ADD_ALU_Sel=4'd0,
        SUB_ALU_Sel=4'd1,
        SLL_ALU_Sel=4'd2,
        SLLV_ALU_Sel=4'd4,
        SRAV_ALU_Sel=4'd6,
        ERR_ALU_Sel=4'dx
    }alu_sel_t;
    
    //Packed struct to unify the control unit outputs
    typedef struct packed{
        opcode_decoder_signal_t signals;
        alu_sel_t alu_sel;
    } control_signals_t;
    
    
    
    
    
    
    
    typedef struct packed{
        logic[5:0]opcode;
        logic[4:0]rs;
        logic[4:0]rt;
        logic[4:0]rd;
        logic[4:0]shamt;
        logic[5:0]funct;
    }r_type_instruction_t;

    typedef struct packed{
        logic[5:0]opcode;
        logic[4:0]rs;
        logic[4:0]rt;
        logic[15:0]imm;
    }i_type_instruction_t;

    typedef struct packed{
        logic[5:0]opcode;
        logic[25:0]jump_target;
    }j_type_instruction_t;

    typedef union packed{
        r_type_instruction_t r_type_instruction;
        i_type_instruction_t i_type_instruction;
        j_type_instruction_t j_type_instruction;
    }mips_instruction_t;
    endpackage
    import MIPS_SC_Definitions :: *;
`endif